import willow.train.kuayue.builder.ModuleCompilePlugin

import java.text.SimpleDateFormat

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net'}
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "org.spongepowered:mixingradle:${mixingradle_version}"
    }
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
plugins {
    id 'eclipse'
    id 'maven-publish'
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: ModuleCompilePlugin

jarJar.enable()

group = 'willow.train.kuayue' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'kuayue'

Properties localProperties = new Properties()
File localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withInputStream { stream ->
        localProperties.load(stream)
    }
}

channel = localProperties.getProperty("channel") ?: channel
snapshot_serial = localProperties.getProperty("snapshot_serial") ?: snapshot_serial
internal_code = localProperties.getProperty("internal_code") ?: internal_code

def mod_full_version
def repository_channel = "releases"
def repository_version = "${minecraft_version}"
version = "${minecraft_version}-${mod_version}"

switch (channel) {
    case "nightly":
        repository_channel = "nightly"
        if(!project.findProperty("git_version"))
            throw new GradleException("You must specify the git_version property by using -Pgit_version=..... for nightly builds.")
        version = "${version}-nightly-${project.property("git_version")}+" + (new SimpleDateFormat("yyMMddHHmm").format(new Date()))
        break;
    case "alpha":
    case "beta":
    case "rc":
        repository_channel = "snapshots"
        if(!project.findProperty("snapshot_serial"))
            throw new GradleException("You must specify the snapshot serial in gradle.properties!")
        version = "${version}-${channel}.${snapshot_serial}"
        break;
    case "internal":
        repository_channel = "internals"
        if(!project.findProperty("internal_code"))
            throw new GradleException("You must specify the internal code in gradle.properties!")
        version = "${version}-internal-${internal_code}-" + (new SimpleDateFormat("yyMMddHHmmss").format(new Date()))
        break;
    case "release":
        break;
    default:
        throw new GradleException("Unknown channel: ${channel}. Please use one of the following channels: nightly, alpha, beta, rc, internal, release.");
}

System.out.println("Building KuaYue for channel: ${repository_channel}, version: ${version} (${minecraft_version})")
mod_full_version = version

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {

    mappings channel: 'parchment', version: '2022.09.18-1.19.2'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')
            arg '-mixin.config=kuayue.mixins.json'
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kuayue'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kuayue {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            arg '-mixin.config=kuayue.mixins.json'

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'
            // arg '-torg.spongepowered.asm.launch.MixinTweaker'
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kuayue'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kuayue {
                    source sourceSets.main
                }
            }
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            workingDirectory project.file('run')
            arg '-mixin.config=kuayue.mixins.json'
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'kuayue'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"
            mods {
                kuayue {
                    source sourceSets.main
                }
            }
        }

        data {
            arg '-mixin.config=kuayue.mixins.json'
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'kuayue', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                kuayue {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

repositories {
    // Put repositories for dependencies here
    // ForgeGradle automatically adds the Forge maven and Maven Central for you

    // If you have mod jar dependencies in ./libs, you can declare them as a repository like so:
    // flatDir {
    //     dir 'libs'
    // }
    maven {
        name = 'tterrag maven'
        url = 'https://maven.tterrag.com/'
    }
//    maven {
//        // location of the maven that hosts JEI files
//        name = "Progwml6 maven"
//        url = "https://dvs1.progwml6.com/files/maven/"
//    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        url = "https://maven.theillusivec4.top/"
    }
    maven {
         url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }

    mavenLocal()

    if(channel == "nightly"){
        flatDir {dir 'libs'}
    } else {
        maven {
            name = "KuaYue Maven"
            url = uri("https://maven.kuayue.pw/${kasuga_lib_channel}")
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use. If this is any group other than 'net.minecraft', it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency, and its patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.19.2-43.3.2'
    implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    // implementation fg.deobf("com.simibubi.create:create-${create_minecraft_version}:${create_version}:slim") { transitive = false }
    // implementation fg.deobf("com.jozufozu.flywheel:flywheel-forge-${flywheel_minecraft_version}:${flywheel_version}")
    implementation fg.deobf("com.tterrag.registrate:Registrate:${registrate_version}")
    //implementation fg.deobf("curse.maven:create-steam-n-rails-688231:4726383")

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.4.1"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.4.1")) {
        jarJar.ranged(it, "[0.4.1,)")
    }

    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_minecraft_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:worldedit-225608:3922622")

    implementation fg.deobf("curse.maven:lan-server-properties-387365:3900754")

    implementation "org.spongepowered:mixin:${mixin_version}"
    annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    testAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    // implementation files('libs/Mixed-Arithmetic-Logic-Interpreter-1.0.0.jar')
    if(channel == "nightly"){
        implementation fg.deobf("libs:kasuga_lib:+")
    } else {
        implementation fg.deobf("kasuga.lib:kasuga_lib-${minecraft_version}-create:${kasuga_lib_version}")
    }
    implementation "org.projectlombok:lombok:1.18.34"
    annotationProcessor "org.projectlombok:lombok:1.18.34"
    // testImplementation "edu.carole:Mixed-Arithmetic-Logic-Interpreter:1.0.0"
    // clientAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    // apiAnnotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "kuayue",
                "Specification-Vendor"    : "NeoKuayueTeam",
                "Specification-Version"   : "20", // We are version 18 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "NeoKuayueTeam",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'kuayue.mixins.json'
        ])
    }
}


processResources.dependsOn("resourceCompileTask")

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
// 当需要发布正式版本的时候用下面这个，给开发用的版本则不要用这个，task 跑 jarJar
// jar.finalizedBy('reobfJar')

// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')
tasks.named("jar").configure {
    archiveClassifier = 'slim'

    // finalizedBy 'reobfJar'
}

tasks.named("jarJar").configure {
    archiveClassifier = ''
}

java {
    // withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
            artifact sourcesJar
            // artifact javadocJar
            groupId = "willow.train.kuayue"
            artifactId = "kuayue-${repository_version}"
            version = "${mod_full_version}"

            fg.component(it)
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }

    repositories {
        maven {
            name = "kuayueMaven"
            url = uri("https://maven.kuayue.pw/${repository_channel}/")
            credentials(PasswordCredentials) {
                username = project.findProperty("kuayueMavenUsername") ?: localProperties.findProperty("repository_username")
                password = project.findProperty("kuayueMavenPassword") ?: localProperties.findProperty("repository_password")
            }
            authentication {
                basic(BasicAuthentication)
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

mixin {
    add sourceSets.main, 'kuayue.refmap.json'
    config 'kuayue.mixins.json'
}
